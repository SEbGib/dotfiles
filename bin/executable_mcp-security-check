#!/bin/bash

# MCP Security Assessment Framework
# Performs comprehensive security checks before installing MCP servers

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Security check functions
check_repository_security() {
    local repo_url="$1"
    local server_name="$2"
    
    echo -e "${BLUE}üîç Checking repository security for ${server_name}...${NC}"
    
    # Extract GitHub repository info
    if [[ "$repo_url" =~ github\.com/([^/]+)/([^/]+) ]]; then
        local owner="${BASH_REMATCH[1]}"
        local repo="${BASH_REMATCH[2]}"
        
        # Check repository age, stars, forks using GitHub API
        if command -v gh &> /dev/null; then
            local repo_info=$(gh api repos/${owner}/${repo} 2>/dev/null || echo "{}")
            if [[ "$repo_info" != "{}" ]]; then
                local stars=$(echo "$repo_info" | jq -r '.stargazers_count // 0')
                local forks=$(echo "$repo_info" | jq -r '.forks_count // 0')
                local created_at=$(echo "$repo_info" | jq -r '.created_at')
                local updated_at=$(echo "$repo_info" | jq -r '.updated_at')
                
                echo -e "  ‚≠ê Stars: $stars"
                echo -e "  üîó Forks: $forks"
                echo -e "  üìÖ Created: $created_at"
                echo -e "  üîÑ Updated: $updated_at"
                
                # Security scoring
                local score=0
                [[ $stars -gt 100 ]] && ((score+=2))
                [[ $stars -gt 500 ]] && ((score+=2))
                [[ $forks -gt 20 ]] && ((score+=1))
                
                if [[ $score -ge 3 ]]; then
                    echo -e "  ${GREEN}‚úÖ Repository appears trustworthy${NC}"
                    return 0
                elif [[ $score -ge 1 ]]; then
                    echo -e "  ${YELLOW}‚ö†Ô∏è  Repository has moderate trust indicators${NC}"
                    return 1
                else
                    echo -e "  ${RED}‚ùå Repository has low trust indicators${NC}"
                    return 2
                fi
            fi
        fi
    fi
    
    echo -e "  ${YELLOW}‚ö†Ô∏è  Could not verify repository security${NC}"
    return 1
}

check_npm_package_security() {
    local package_name="$1"
    
    echo -e "${BLUE}üîç Checking npm package security for ${package_name}...${NC}"
    
    # Check if package exists and get info
    if command -v npm &> /dev/null; then
        local package_info=$(npm view "$package_name" --json 2>/dev/null || echo "{}")
        
        if [[ "$package_info" != "{}" ]]; then
            local version=$(echo "$package_info" | jq -r '.version // "unknown"')
            local downloads=$(echo "$package_info" | jq -r '.downloads // 0')
            local maintainers=$(echo "$package_info" | jq -r '.maintainers // [] | length')
            
            echo -e "  üì¶ Version: $version"
            echo -e "  üìä Weekly downloads: $downloads"
            echo -e "  üë• Maintainers: $maintainers"
            
            # Check for known vulnerabilities using npm audit
            echo -e "  üîí Checking for vulnerabilities..."
            local audit_result=$(npm audit --package-lock-only --json 2>/dev/null || echo '{"vulnerabilities":{}}')
            local vuln_count=$(echo "$audit_result" | jq -r '.metadata.vulnerabilities.total // 0')
            
            if [[ $vuln_count -eq 0 ]]; then
                echo -e "  ${GREEN}‚úÖ No known vulnerabilities${NC}"
                return 0
            else
                echo -e "  ${RED}‚ùå Found $vuln_count vulnerabilities${NC}"
                return 2
            fi
        else
            echo -e "  ${RED}‚ùå Package not found or inaccessible${NC}"
            return 2
        fi
    fi
    
    echo -e "  ${YELLOW}‚ö†Ô∏è  Could not verify package security (npm not available)${NC}"
    return 1
}

check_network_requirements() {
    local server_name="$1"
    local network_endpoints="$2"
    
    echo -e "${BLUE}üåê Checking network requirements for ${server_name}...${NC}"
    
    if [[ -n "$network_endpoints" ]]; then
        echo -e "  üì° Required network access:"
        IFS=',' read -ra endpoints <<< "$network_endpoints"
        for endpoint in "${endpoints[@]}"; do
            echo -e "    ‚Ä¢ $endpoint"
            
            # Test connectivity
            if command -v curl &> /dev/null; then
                if curl -s --connect-timeout 5 "$endpoint" >/dev/null 2>&1; then
                    echo -e "      ${GREEN}‚úÖ Accessible${NC}"
                else
                    echo -e "      ${YELLOW}‚ö†Ô∏è  Connection test failed${NC}"
                fi
            fi
        done
    else
        echo -e "  ${GREEN}‚úÖ No external network access required${NC}"
    fi
}

assess_data_access_scope() {
    local server_name="$1"
    local data_scope="$2"
    
    echo -e "${BLUE}üìä Assessing data access scope for ${server_name}...${NC}"
    
    case "$data_scope" in
        "read-only")
            echo -e "  ${GREEN}‚úÖ Read-only access (low risk)${NC}"
            return 0
            ;;
        "read-write")
            echo -e "  ${YELLOW}‚ö†Ô∏è  Read-write access (medium risk)${NC}"
            return 1
            ;;
        "admin")
            echo -e "  ${RED}‚ùå Administrative access (high risk)${NC}"
            return 2
            ;;
        *)
            echo -e "  ${YELLOW}‚ö†Ô∏è  Unknown access scope${NC}"
            return 1
            ;;
    esac
}

generate_security_report() {
    local server_name="$1"
    local overall_score="$2"
    
    echo -e "\n${BLUE}üìã Security Assessment Summary for ${server_name}:${NC}"
    
    case "$overall_score" in
        0)
            echo -e "  ${GREEN}‚úÖ APPROVED: Low security risk${NC}"
            echo -e "  ${GREEN}   Safe to install with standard security controls${NC}"
            ;;
        1)
            echo -e "  ${YELLOW}‚ö†Ô∏è  CAUTION: Medium security risk${NC}"
            echo -e "  ${YELLOW}   Install with enhanced monitoring and controls${NC}"
            ;;
        *)
            echo -e "  ${RED}‚ùå REJECTED: High security risk${NC}"
            echo -e "  ${RED}   Manual security review required before installation${NC}"
            ;;
    esac
}

# Main security assessment function
assess_mcp_server() {
    local server_name="$1"
    local repo_url="${2:-}"
    local package_name="${3:-}"
    local network_endpoints="${4:-}"
    local data_scope="${5:-read-only}"
    
    echo -e "\n${BLUE}üîí Security Assessment for MCP Server: ${server_name}${NC}"
    echo -e "${BLUE}================================================${NC}"
    
    local total_score=0
    
    # Repository security check
    if [[ -n "$repo_url" ]]; then
        check_repository_security "$repo_url" "$server_name"
        total_score=$((total_score + $?))
    fi
    
    # Package security check
    if [[ -n "$package_name" ]]; then
        check_npm_package_security "$package_name"
        total_score=$((total_score + $?))
    fi
    
    # Network requirements check
    check_network_requirements "$server_name" "$network_endpoints"
    
    # Data access scope assessment
    assess_data_access_scope "$server_name" "$data_scope"
    total_score=$((total_score + $?))
    
    # Generate final report
    generate_security_report "$server_name" "$total_score"
    
    return $total_score
}

# Usage information
show_usage() {
    echo "Usage: $0 <server_name> [options]"
    echo ""
    echo "Options:"
    echo "  --repo-url URL          Repository URL for security check"
    echo "  --package-name NAME     npm package name for vulnerability check"
    echo "  --network-endpoints     Comma-separated list of required network endpoints"
    echo "  --data-scope SCOPE      Data access scope (read-only, read-write, admin)"
    echo "  --help                  Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0 context7 --repo-url https://github.com/upstash/context7 --package-name @upstash/context7-mcp --network-endpoints https://api.context7.com --data-scope read-only"
    echo "  $0 notion --network-endpoints https://api.notion.com --data-scope read-write"
}

# Parse command line arguments
if [[ $# -eq 0 ]] || [[ "$1" == "--help" ]]; then
    show_usage
    exit 0
fi

SERVER_NAME="$1"
shift

REPO_URL=""
PACKAGE_NAME=""
NETWORK_ENDPOINTS=""
DATA_SCOPE="read-only"

while [[ $# -gt 0 ]]; do
    case $1 in
        --repo-url)
            REPO_URL="$2"
            shift 2
            ;;
        --package-name)
            PACKAGE_NAME="$2"
            shift 2
            ;;
        --network-endpoints)
            NETWORK_ENDPOINTS="$2"
            shift 2
            ;;
        --data-scope)
            DATA_SCOPE="$2"
            shift 2
            ;;
        *)
            echo "Unknown option: $1"
            show_usage
            exit 1
            ;;
    esac
done

# Run the security assessment
assess_mcp_server "$SERVER_NAME" "$REPO_URL" "$PACKAGE_NAME" "$NETWORK_ENDPOINTS" "$DATA_SCOPE"
exit_code=$?

echo -e "\n${BLUE}Security assessment completed with exit code: $exit_code${NC}"
exit $exit_code