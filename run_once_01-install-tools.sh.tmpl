#!/bin/bash

# Use safer error handling - don't exit on command failures
set -ufo pipefail

# ===== ERROR HANDLING AND CLEANUP =====
TEMP_DIR=""
FAILED_DOWNLOADS=()

cleanup() {
    if [[ -n "$TEMP_DIR" && -d "$TEMP_DIR" ]]; then
        echo "🧹 Nettoyage des fichiers temporaires..."
        rm -rf "$TEMP_DIR"
    fi
}

error_exit() {
    echo "❌ Erreur: $1" >&2
    cleanup
    exit 1
}

# Trap pour nettoyer en cas d'erreur
trap cleanup EXIT
trap 'error_exit "Script interrompu"' INT TERM

# Fonction de téléchargement sécurisé avec retry
safe_download() {
    local url="$1"
    local output="$2"
    local max_retries=3
    local retry=0
    
    while [[ $retry -lt $max_retries ]]; do
        echo "📥 Téléchargement: $(basename "$output") (tentative $((retry + 1))/$max_retries)"
        
        if curl -fsSL --connect-timeout 30 --max-time 300 "$url" -o "$output"; then
            # Vérifier que le fichier n'est pas vide
            if [[ -s "$output" ]]; then
                echo "✅ Téléchargement réussi: $(basename "$output")"
                return 0
            else
                echo "⚠️  Fichier vide détecté"
            fi
        fi
        
        retry=$((retry + 1))
        if [[ $retry -lt $max_retries ]]; then
            echo "🔄 Nouvelle tentative dans 5 secondes..."
            sleep 5
        fi
    done
    
    FAILED_DOWNLOADS+=("$url")
    echo "❌ Échec du téléchargement après $max_retries tentatives: $url"
    return 1
}

# Fonction d'extraction sécurisée
safe_extract() {
    local archive="$1"
    local destination="$2"
    
    echo "📦 Extraction: $(basename "$archive")"
    
    case "$archive" in
        *.tar.gz|*.tgz)
            if ! tar -tzf "$archive" &>/dev/null; then
                echo "❌ Archive corrompue: $archive"
                return 1
            fi
            tar -xzf "$archive" -C "$destination"
            ;;
        *.zip)
            if ! unzip -t "$archive" &>/dev/null; then
                echo "❌ Archive corrompue: $archive"
                return 1
            fi
            unzip -q "$archive" -d "$destination"
            ;;
        *)
            echo "❌ Format d'archive non supporté: $archive"
            return 1
            ;;
    esac
}

# Créer dossier temporaire
TEMP_DIR=$(mktemp -d)
echo "📁 Dossier temporaire: $TEMP_DIR"

echo "🔧 Installation des outils essentiels et configuration Starship + plugins Zsh..."

{{- if eq .chezmoi.os "darwin" }}
# macOS - Homebrew
if ! command -v brew &> /dev/null; then
    echo "📦 Installation Homebrew..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    eval "$(/opt/homebrew/bin/brew shellenv)"
fi

echo "📦 Installation des packages via Homebrew..."
brew bundle --file=- <<EOF
# Shells et outils de base
brew "zsh"
brew "starship"

# Outils essentiels
brew "chezmoi"
brew "neovim"
brew "tmux"
brew "git"
brew "git-delta"
brew "gh"

# Outils modernes de ligne de commande
brew "fzf"
brew "ripgrep"
brew "fd"
brew "bat"
brew "eza"
brew "zoxide"
brew "dust"
brew "duf"
brew "procs"

# Développement
brew "lazygit"
brew "node"
brew "php"
brew "composer"
brew "symfony-cli/tap/symfony-cli"

# Docker et conteneurs
brew "docker"
brew "docker-compose"
brew "lazydocker"

# Python et outils
brew "python@3.11"
brew "pipx"

# Sécurité et secrets
brew "age"
brew "gnupg"

# Fonts Nerd
cask "font-fira-code-nerd-font"
cask "font-jetbrains-mono-nerd-font"
cask "font-hack-nerd-font"
cask "font-meslo-lg-nerd-font"

# Terminal moderne
cask "ghostty"

# Applications utiles
{{- if (index . "personal" | default false) }}
cask "raycast"
cask "visual-studio-code"
{{- end }}
EOF

{{- else if eq .chezmoi.os "linux" }}
# Linux - Détection distribution
if command -v apt &> /dev/null; then
    echo "📦 Installation via apt (Ubuntu/Debian)..."
    sudo apt update
    
    # Repositories externes
    curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
    
    # Neovim PPA pour version récente (0.8+)
    sudo add-apt-repository ppa:neovim-ppa/unstable -y 2>/dev/null || echo "⚠️  PPA Neovim non ajouté (non critique)"
    
    sudo apt update
    sudo apt install -y \
        zsh \
        neovim \
        tmux \
        git \
        git-delta \
        fzf \
        ripgrep \
        fd-find \
        bat \
        curl \
        wget \
        unzip \
        build-essential \
        gh \
        age \
        gnupg2 \
        python3-pip \
        software-properties-common \
        apt-transport-https \
        ca-certificates
        
    # Ghostty terminal (via GitHub releases)
    if ! command -v ghostty &> /dev/null; then
        echo "📦 Installation Ghostty..."
        GHOSTTY_VERSION=$(curl -s "https://api.github.com/repos/ghostty-org/ghostty/releases/latest" | grep -Po '"tag_name": "v\K[^"]*')
        wget -O ghostty.deb "https://github.com/ghostty-org/ghostty/releases/latest/download/ghostty_${GHOSTTY_VERSION}_amd64.deb"
        sudo dpkg -i ghostty.deb || sudo apt-get install -f -y
        rm ghostty.deb
    fi
        
    # Créer liens symboliques pour fd et bat si nécessaire
    if [[ ! -f /usr/local/bin/fd ]] && [[ -f /usr/bin/fdfind ]]; then
        sudo ln -sf /usr/bin/fdfind /usr/local/bin/fd
    fi
    
    if [[ ! -f /usr/local/bin/bat ]] && [[ -f /usr/bin/batcat ]]; then
        sudo ln -sf /usr/bin/batcat /usr/local/bin/bat
    fi
    
    # Node.js via NodeSource
    if ! command -v node &> /dev/null; then
        curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
        sudo apt install -y nodejs
    fi
    
    # PHP si pas installé
    if ! command -v php &> /dev/null; then
        sudo apt install -y php php-cli php-mbstring php-xml php-zip php-curl composer
    fi
    
    # Docker installation
    if ! command -v docker &> /dev/null; then
        echo "📦 Installation Docker..."
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        sudo apt update
        sudo apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
        sudo usermod -aG docker $USER
        echo "⚠️  Vous devez vous reconnecter pour utiliser Docker sans sudo"
    fi
    
    # Python et pip
    if ! command -v python3 &> /dev/null; then
        sudo apt install -y python3 python3-pip python3-venv
    fi
    
    # Installation des outils modernes via téléchargement sécurisé
    if ! command -v eza &> /dev/null; then
        echo "📦 Installation Eza..."
        if safe_download "https://github.com/eza-community/eza/releases/latest/download/eza_x86_64-unknown-linux-gnu.tar.gz" "$TEMP_DIR/eza.tar.gz"; then
            if safe_extract "$TEMP_DIR/eza.tar.gz" "$TEMP_DIR"; then
                sudo mv "$TEMP_DIR/eza" /usr/local/bin/ || echo "⚠️  Échec installation eza (non critique)"
            fi
        else
            echo "⚠️  Eza non installé (non critique)"
        fi
    fi
    
    if ! command -v dust &> /dev/null; then
        echo "📦 Installation Dust..."
        # Déterminer l'architecture
        ARCH=$(uname -m)
        case "$ARCH" in
            x86_64) DUST_ARCH="x86_64-unknown-linux-gnu" ;;
            aarch64|arm64) DUST_ARCH="aarch64-unknown-linux-gnu" ;;
            armv7l) DUST_ARCH="arm-unknown-linux-gnueabihf" ;;
            i686) DUST_ARCH="i686-unknown-linux-gnu" ;;
            *) DUST_ARCH="x86_64-unknown-linux-gnu" ;;
        esac
        
        DUST_VERSION=$(curl -s --connect-timeout 10 "https://api.github.com/repos/bootandy/dust/releases/latest" 2>/dev/null | grep -Po '"tag_name": "v\K[^"]*' || echo "1.2.2")
        DUST_URL="https://github.com/bootandy/dust/releases/download/v${DUST_VERSION}/dust-v${DUST_VERSION}-${DUST_ARCH}.tar.gz"
        
        if safe_download "$DUST_URL" "$TEMP_DIR/dust.tar.gz"; then
            if safe_extract "$TEMP_DIR/dust.tar.gz" "$TEMP_DIR"; then
                sudo mv "$TEMP_DIR"/dust /usr/local/bin/ 2>/dev/null || echo "⚠️  Échec installation dust (non critique)"
            fi
        else
            echo "⚠️  Dust non installé (non critique)"
        fi
    fi
    
elif command -v pacman &> /dev/null; then
    echo "📦 Installation via pacman (Arch Linux)..."
    sudo pacman -Syu --noconfirm
    sudo pacman -S --noconfirm \
        zsh \
        neovim \
        tmux \
        git \
        git-delta \
        fzf \
        ripgrep \
        fd \
        bat \
        eza \
        github-cli \
        nodejs \
        npm \
        php \
        composer \
        age \
        gnupg \
        dust \
        duf \
        procs \
        docker \
        docker-compose \
        python \
        python-pip
        
    # Ghostty terminal (AUR)
    if command -v yay &> /dev/null && ! command -v ghostty &> /dev/null; then
        yay -S --noconfirm ghostty
    fi
        
    # AUR packages avec yay si disponible
    if command -v yay &> /dev/null; then
        yay -S --noconfirm bitwarden-cli starship
    fi
fi

# Installation manuelle des outils manquants

# Starship
if ! command -v starship &> /dev/null; then
    echo "📦 Installation Starship..."
    if safe_download "https://starship.rs/install.sh" "$TEMP_DIR/starship_install.sh"; then
        chmod +x "$TEMP_DIR/starship_install.sh"
        "$TEMP_DIR/starship_install.sh" -y || echo "⚠️  Échec installation Starship (non critique)"
    else
        echo "⚠️  Starship non installé (non critique)"
    fi
fi

# Zoxide
if ! command -v zoxide &> /dev/null; then
    echo "📦 Installation Zoxide..."
    if safe_download "https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh" "$TEMP_DIR/zoxide_install.sh"; then
        chmod +x "$TEMP_DIR/zoxide_install.sh"
        bash "$TEMP_DIR/zoxide_install.sh" || echo "⚠️  Échec installation Zoxide (non critique)"
    else
        echo "⚠️  Zoxide non installé (non critique)"
    fi
fi
{{- end }}

# Installation Chezmoi si pas déjà fait
if ! command -v chezmoi &> /dev/null; then
    echo "📦 Installation Chezmoi..."
    sh -c "$(curl -fsLS get.chezmoi.io)"
fi

# Installation Symfony CLI (si PHP installé)
{{- if lookPath "php" }}
if ! command -v symfony &> /dev/null; then
    echo "📦 Installation Symfony CLI..."
    curl -sS https://get.symfony.com/cli/installer | bash
    sudo mv ~/.symfony*/bin/symfony /usr/local/bin/symfony 2>/dev/null || true
fi
{{- end }}

# Installation Lazygit (si pas disponible via package manager)
if ! command -v lazygit &> /dev/null; then
    echo "📦 Installation Lazygit..."
    LAZYGIT_VERSION=$(curl -s --connect-timeout 10 "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" 2>/dev/null | grep -Po '"tag_name": "v\K[^"]*' || echo "0.40.2")
    
    if [[ -n "$LAZYGIT_VERSION" ]]; then
        LAZYGIT_URL="https://github.com/jesseduffield/lazygit/releases/latest/download/lazygit_${LAZYGIT_VERSION}_{{ .chezmoi.os }}_{{ .chezmoi.arch }}.tar.gz"
        
        if safe_download "$LAZYGIT_URL" "$TEMP_DIR/lazygit.tar.gz"; then
            if safe_extract "$TEMP_DIR/lazygit.tar.gz" "$TEMP_DIR"; then
                sudo install "$TEMP_DIR/lazygit" /usr/local/bin || echo "⚠️  Échec installation lazygit (non critique)"
            fi
        else
            echo "⚠️  Lazygit non installé (non critique)"
        fi
    else
        echo "⚠️  Impossible de déterminer la version de Lazygit"
    fi
fi

# Installation Lazydocker (si pas disponible via package manager)
if ! command -v lazydocker &> /dev/null; then
    echo "📦 Installation Lazydocker..."
    if safe_download "https://raw.githubusercontent.com/jesseduffield/lazydocker/master/scripts/install_update_linux.sh" "$TEMP_DIR/lazydocker_install.sh"; then
        chmod +x "$TEMP_DIR/lazydocker_install.sh"
        bash "$TEMP_DIR/lazydocker_install.sh" || echo "⚠️  Échec installation Lazydocker (non critique)"
    else
        echo "⚠️  Lazydocker non installé (non critique)"
    fi
fi

# Installation d'outils Python utiles
if command -v python3 &> /dev/null; then
    echo "📦 Installation outils Python..."
    
    # Vérifier si on peut installer via pip (environnement non géré)
    if python3 -m pip install --help &>/dev/null; then
        # Essayer d'installer avec --user d'abord
            if python3 -m pip install --user --upgrade black flake8 mypy pytest requests httpie pynvim 2>/dev/null; then
                echo "✅ Outils Python installés via pip --user"
            elif command -v pipx &> /dev/null; then
            # Utiliser pipx si disponible
            echo "📦 Installation via pipx..."
            pipx install black || echo "⚠️  black non installé"
            pipx install flake8 || echo "⚠️  flake8 non installé"
            pipx install mypy || echo "⚠️  mypy non installé"
            pipx install pytest || echo "⚠️  pytest non installé"
            pipx install httpie || echo "⚠️  httpie non installé"
        else
            # Installer les packages système si disponibles
            echo "📦 Installation via packages système..."
            if command -v apt &> /dev/null; then
                sudo apt install -y python3-black python3-flake8 python3-mypy python3-pytest python3-requests python3-httpie python3-pynvim 2>/dev/null || echo "⚠️  Certains packages Python non disponibles"
            elif command -v pacman &> /dev/null; then
                sudo pacman -S --noconfirm python-black python-flake8 python-mypy python-pytest python-requests python-httpie 2>/dev/null || echo "⚠️  Certains packages Python non disponibles"
            else
                echo "⚠️  Impossible d'installer les outils Python (environnement géré)"
            fi
        fi
    else
        echo "⚠️  pip non disponible, outils Python non installés"
    fi
fi

# Installation d'outils Node.js globaux
if command -v npm &> /dev/null; then
    echo "📦 Configuration npm pour installation utilisateur..."
    
    # Créer le dossier npm global utilisateur
    mkdir -p "$HOME/.npm-global"
    
    # Configurer npm pour utiliser le dossier utilisateur
    npm config set prefix "$HOME/.npm-global" 2>/dev/null || echo "⚠️  Configuration npm échouée"
    
    # Ajouter au PATH si pas déjà fait
    if [[ ":$PATH:" != *":$HOME/.npm-global/bin:"* ]]; then
        export PATH="$HOME/.npm-global/bin:$PATH"
    fi
    
    echo "📦 Installation outils Node.js globaux..."
    
    # Liste des packages à installer
    npm_packages=(
        "typescript"
        "ts-node" 
        "@types/node"
        "eslint"
        "prettier"
        "nodemon"
        "pm2"
        "yarn"
    )
    
    # Installer chaque package individuellement pour éviter l'échec total
    for package in "${npm_packages[@]}"; do
        echo "📦 Installation $package..."
        if npm install -g "$package" 2>/dev/null; then
            echo "✅ $package installé"
        else
            echo "⚠️  Échec installation $package (non critique)"
        fi
    done
    
    echo "💡 Ajoutez 'export PATH=\"\$HOME/.npm-global/bin:\$PATH\"' à votre ~/.bashrc ou ~/.zshrc"
fi

# Configuration Zsh comme shell par défaut
if [[ "$SHELL" != */zsh ]]; then
    echo "🐚 Configuration Zsh comme shell par défaut..."
    if ! grep -q "$(which zsh)" /etc/shells; then
        which zsh | sudo tee -a /etc/shells
    fi
    chsh -s "$(which zsh)"
    echo "✅ Zsh configuré. Redémarrez votre terminal."
fi

# Vérification finale des installations
echo ""
echo "🔍 Vérification des installations..."
tools_to_check=(
    "zsh" "starship" "neovim" "tmux" "git" "fzf" "ripgrep" "fd" "bat" "eza" 
    "zoxide" "lazygit" "node" "npm" "php" "composer" "docker" "chezmoi" "ghostty"
)

for tool in "${tools_to_check[@]}"; do
    if command -v "$tool" &> /dev/null; then
        echo "✅ $tool"
    else
        echo "❌ $tool (non installé)"
    fi
done

echo ""
if [[ ${#FAILED_DOWNLOADS[@]} -gt 0 ]]; then
    echo "⚠️  Certains téléchargements ont échoué :"
    for failed_url in "${FAILED_DOWNLOADS[@]}"; do
        echo "   • $(basename "$failed_url")"
    done
    echo ""
    echo "💡 Vous pouvez réessayer plus tard avec: chezmoi apply"
    echo ""
fi

echo "✅ Installation des outils terminée!"
echo ""
echo "📋 Outils installés :"
echo "   • Ghostty (terminal moderne)"
echo "   • Starship (prompt moderne)"
echo "   • Zsh (shell avancé)"
echo "   • Neovim + tmux (éditeur et multiplexeur)"
echo "   • Docker + Lazydocker (conteneurs)"
echo "   • Outils modernes CLI (fzf, ripgrep, bat, eza, etc.)"
echo "   • Développement (Node.js, PHP, Python)"
echo ""
echo "🔄 Actions requises :"
echo "   1. Redémarrez votre terminal pour Zsh"
{{- if eq .chezmoi.os "linux" }}
echo "   2. Reconnectez-vous pour utiliser Docker sans sudo"
{{- end }}
echo "   3. Lancez 'chezmoi apply' pour appliquer la configuration"

# Ne pas faire échouer le script si certains outils optionnels n'ont pas pu être installés
exit 0
