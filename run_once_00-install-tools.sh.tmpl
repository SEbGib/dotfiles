#!/bin/bash

set -eufo pipefail

echo "🔧 Installation des outils essentiels et configuration Starship + plugins Zsh..."

{{- if eq .chezmoi.os "darwin" }}
# macOS - Homebrew
if ! command -v brew &> /dev/null; then
    echo "📦 Installation Homebrew..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    eval "$(/opt/homebrew/bin/brew shellenv)"
fi

echo "📦 Installation des packages via Homebrew..."
brew bundle --file=- <<EOF
# Shells et outils de base
brew "zsh"
brew "starship"

# Outils essentiels
brew "chezmoi"
brew "neovim"
brew "tmux"
brew "git"
brew "git-delta"
brew "gh"

# Outils modernes de ligne de commande
brew "fzf"
brew "ripgrep"
brew "fd"
brew "bat"
brew "eza"
brew "zoxide"
brew "dust"
brew "duf"
brew "procs"

# Développement
brew "lazygit"
brew "node"
brew "php"
brew "composer"
brew "symfony-cli/tap/symfony-cli"

# Docker et conteneurs
brew "docker"
brew "docker-compose"
brew "lazydocker"

# Python et outils
brew "python@3.11"
brew "pipx"

# Sécurité et secrets
brew "age"
brew "gnupg"

# Fonts Nerd
cask "font-fira-code-nerd-font"
cask "font-jetbrains-mono-nerd-font"
cask "font-hack-nerd-font"
cask "font-meslo-lg-nerd-font"

# Terminal moderne
cask "ghostty"

# Applications utiles
{{- if (index . "personal" | default false) }}
cask "raycast"
cask "cleanmymac"
cask "visual-studio-code"
{{- end }}
EOF

{{- else if eq .chezmoi.os "linux" }}
# Linux - Détection distribution
if command -v apt &> /dev/null; then
    echo "📦 Installation via apt (Ubuntu/Debian)..."
    sudo apt update
    
    # Repositories externes
    curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
    
    sudo apt update
    sudo apt install -y \
        zsh \
        neovim \
        tmux \
        git \
        git-delta \
        fzf \
        ripgrep \
        fd-find \
        bat \
        curl \
        wget \
        unzip \
        build-essential \
        gh \
        age \
        gnupg2 \
        python3-pip \
        software-properties-common \
        apt-transport-https \
        ca-certificates
        
    # Ghostty terminal (via GitHub releases)
    if ! command -v ghostty &> /dev/null; then
        echo "📦 Installation Ghostty..."
        GHOSTTY_VERSION=$(curl -s "https://api.github.com/repos/ghostty-org/ghostty/releases/latest" | grep -Po '"tag_name": "v\K[^"]*')
        wget -O ghostty.deb "https://github.com/ghostty-org/ghostty/releases/latest/download/ghostty_${GHOSTTY_VERSION}_amd64.deb"
        sudo dpkg -i ghostty.deb || sudo apt-get install -f -y
        rm ghostty.deb
    fi
        
    # Créer liens symboliques pour fd et bat si nécessaire
    if [[ ! -f /usr/local/bin/fd ]] && [[ -f /usr/bin/fdfind ]]; then
        sudo ln -sf /usr/bin/fdfind /usr/local/bin/fd
    fi
    
    if [[ ! -f /usr/local/bin/bat ]] && [[ -f /usr/bin/batcat ]]; then
        sudo ln -sf /usr/bin/batcat /usr/local/bin/bat
    fi
    
    # Node.js via NodeSource
    if ! command -v node &> /dev/null; then
        curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
        sudo apt install -y nodejs
    fi
    
    # PHP si pas installé
    if ! command -v php &> /dev/null; then
        sudo apt install -y php php-cli php-mbstring php-xml php-zip php-curl composer
    fi
    
    # Docker installation
    if ! command -v docker &> /dev/null; then
        echo "📦 Installation Docker..."
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        sudo apt update
        sudo apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
        sudo usermod -aG docker $USER
        echo "⚠️  Vous devez vous reconnecter pour utiliser Docker sans sudo"
    fi
    
    # Python et pip
    if ! command -v python3 &> /dev/null; then
        sudo apt install -y python3 python3-pip python3-venv
    fi
    
    # Installation des outils modernes via cargo/scripts
    if ! command -v eza &> /dev/null; then
        wget -qO- https://github.com/eza-community/eza/releases/latest/download/eza_x86_64-unknown-linux-gnu.tar.gz | tar xz -C /tmp
        sudo mv /tmp/eza /usr/local/bin/
    fi
    
    if ! command -v dust &> /dev/null; then
        wget -qO- https://github.com/bootandy/dust/releases/latest/download/dust-v0.8.6-x86_64-unknown-linux-gnu.tar.gz | tar xz -C /tmp
        sudo mv /tmp/dust-*/dust /usr/local/bin/
    fi
    
elif command -v pacman &> /dev/null; then
    echo "📦 Installation via pacman (Arch Linux)..."
    sudo pacman -Syu --noconfirm
    sudo pacman -S --noconfirm \
        zsh \
        neovim \
        tmux \
        git \
        git-delta \
        fzf \
        ripgrep \
        fd \
        bat \
        eza \
        github-cli \
        nodejs \
        npm \
        php \
        composer \
        age \
        gnupg \
        dust \
        duf \
        procs \
        docker \
        docker-compose \
        python \
        python-pip
        
    # Ghostty terminal (AUR)
    if command -v yay &> /dev/null && ! command -v ghostty &> /dev/null; then
        yay -S --noconfirm ghostty
    fi
        
    # AUR packages avec yay si disponible
    if command -v yay &> /dev/null; then
        yay -S --noconfirm bitwarden-cli starship
    fi
fi

# Installation manuelle des outils manquants

# Starship
if ! command -v starship &> /dev/null; then
    echo "📦 Installation Starship..."
    curl -sS https://starship.rs/install.sh | sh -s -- -y
fi

# Zoxide
if ! command -v zoxide &> /dev/null; then
    echo "📦 Installation Zoxide..."
    curl -sS https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | bash
fi
{{- end }}

# Installation Chezmoi si pas déjà fait
if ! command -v chezmoi &> /dev/null; then
    echo "📦 Installation Chezmoi..."
    sh -c "$(curl -fsLS get.chezmoi.io)"
fi

# Installation Symfony CLI (si PHP installé)
{{- if lookPath "php" }}
if ! command -v symfony &> /dev/null; then
    echo "📦 Installation Symfony CLI..."
    curl -sS https://get.symfony.com/cli/installer | bash
    sudo mv ~/.symfony*/bin/symfony /usr/local/bin/symfony 2>/dev/null || true
fi
{{- end }}

# Installation Lazygit (si pas disponible via package manager)
if ! command -v lazygit &> /dev/null; then
    echo "📦 Installation Lazygit..."
    LAZYGIT_VERSION=$(curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | grep -Po '"tag_name": "v\K[^"]*')
    curl -Lo lazygit.tar.gz "https://github.com/jesseduffield/lazygit/releases/latest/download/lazygit_${LAZYGIT_VERSION}_{{ .chezmoi.os }}_{{ .chezmoi.arch }}.tar.gz"
    tar xf lazygit.tar.gz lazygit
    sudo install lazygit /usr/local/bin
    rm lazygit lazygit.tar.gz
fi

# Installation Lazydocker (si pas disponible via package manager)
if ! command -v lazydocker &> /dev/null; then
    echo "📦 Installation Lazydocker..."
    curl https://raw.githubusercontent.com/jesseduffield/lazydocker/master/scripts/install_update_linux.sh | bash
fi

# Installation d'outils Python utiles
if command -v pip3 &> /dev/null; then
    echo "📦 Installation outils Python..."
    pip3 install --user --upgrade \
        black \
        flake8 \
        mypy \
        pytest \
        requests \
        httpie
fi

# Installation d'outils Node.js globaux
if command -v npm &> /dev/null; then
    echo "📦 Installation outils Node.js globaux..."
    npm install -g \
        typescript \
        ts-node \
        @types/node \
        eslint \
        prettier \
        nodemon \
        pm2 \
        yarn
fi

# Configuration Zsh comme shell par défaut
if [[ "$SHELL" != */zsh ]]; then
    echo "🐚 Configuration Zsh comme shell par défaut..."
    if ! grep -q "$(which zsh)" /etc/shells; then
        which zsh | sudo tee -a /etc/shells
    fi
    chsh -s "$(which zsh)"
    echo "✅ Zsh configuré. Redémarrez votre terminal."
fi

# Vérification finale des installations
echo ""
echo "🔍 Vérification des installations..."
tools_to_check=(
    "zsh" "starship" "neovim" "tmux" "git" "fzf" "ripgrep" "fd" "bat" "eza" 
    "zoxide" "lazygit" "node" "npm" "php" "composer" "docker" "chezmoi" "ghostty"
)

for tool in "${tools_to_check[@]}"; do
    if command -v "$tool" &> /dev/null; then
        echo "✅ $tool"
    else
        echo "❌ $tool (non installé)"
    fi
done

echo ""
echo "✅ Installation des outils terminée!"
echo ""
echo "📋 Outils installés :"
echo "   • Ghostty (terminal moderne)"
echo "   • Starship (prompt moderne)"
echo "   • Zsh (shell avancé)"
echo "   • Neovim + tmux (éditeur et multiplexeur)"
echo "   • Docker + Lazydocker (conteneurs)"
echo "   • Outils modernes CLI (fzf, ripgrep, bat, eza, etc.)"
echo "   • Développement (Node.js, PHP, Python)"
echo ""
echo "🔄 Actions requises :"
echo "   1. Redémarrez votre terminal pour Zsh"
{{- if eq .chezmoi.os "linux" }}
echo "   2. Reconnectez-vous pour utiliser Docker sans sudo"
{{- end }}
echo "   3. Lancez 'chezmoi apply' pour appliquer la configuration"
